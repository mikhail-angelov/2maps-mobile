import { Action } from "redux";
import { ThunkAction } from "redux-thunk";
import { State } from "../store/types";

export type AppThunk<ReturnType = void> = ThunkAction<
  ReturnType,
  State,
  unknown,
  Action<string>
>;

export enum ActionTypeEnum {
  // auth
  AuthError = 'auth/ERROR',
  LoginRequest = "auth/LOGIN_REQUEST",
  LoginSuccess = "auth/LOGIN_SUCCESS",
  LoginFailure = "auth/LOGIN_FAILURE",
  LogoutRequest = "auth/LOGOUT_REQUEST",
  LogoutSuccess = "auth/LOGOUT_SUCCESS",
  LogoutFailure = "auth/LOGOUT_FAILURE",
  SignUpRequest = "auth/SIGN_UP_REQUEST",
  SignUpSuccess = "auth/SIGN_UP_SUCCESS",
  SignUpFailure = "auth/SIGN_UP_FAILURE",
  ForgetPasswordRequest = "auth/FORGET_PASSWORD_REQUEST",
  ForgetPasswordSuccess = "auth/FORGET_PASSWORD_SUCCESS",
  ForgetPasswordFailure = "auth/FORGET_PASSWORD_FAILURE",
  StoreResetToken = "auth/STORE_RESET_TOKEN",
  ResetPasswordRequest = "auth/RESET_PASSWORD_REQUEST",
  ResetPasswordSuccess = "auth/RESET_PASSWORD_SUCCESS",
  ResetPasswordFailure = "auth/RESET_PASSWORD_FAILURE",
  ChangePasswordRequest = "auth/CHANGE_PASSWORD_REQUEST",
  ChangePasswordSuccess = "auth/CHANGE_PASSWORD_SUCCESS",
  ChangePasswordFailure = "auth/CHANGE_PASSWORD_FAILURE",
  AddPurchase = "auth/ADD_PURCHASE",
  SetPurchases = "auth/SET_PURCHASES",
  EstablishedPurchaseConnection = "auth/ESTABLISH_PURCHASE_CONNECTION",
  TheFirstTimeAppStart = "auth/THE_FIRST_TIME_APP_START",
  // marks
  MarksRequest = "marks/MARKS_REQUEST",
  MarksSuccess = "marks/MARKS_SUCCESS",
  MarksFailure = "marks/MARKS_FAILURE",
  AddMark = "marks/ADD_MARK",
  EditMark = "marks/EDIT_MARK",
  SaveMark = "marks/SAVE_MARK",
  UpdateMark = "marks/UPDATE_MARK",
  RemoveMark = "marks/REMOVE_MARK",
  RemoveMarkCompletely = "marks/REMOVE_MARK_COMPLETELY",
  RemoveAllMarks = "marks/REMOVE_ALL_MARKS",
  ImportPois = "marks/IMPORT_POIS",
  //tracker
  SetCompass = 'tracker/SET_COMPASS',
  SetLocation = 'tracker/SET_LOCATION',
  SetTracks = 'tracker/SET_TRACKS',
  AddTrack = 'tracker/ADD_TRACK',
  RemoveTrack = 'tracker/REMOVE_TRACK',
  SetSelectedTrack = 'tracker/SET_SELECTED_TRACK',
  SetSelectedTrackBBox = 'tracker/SET_SELECTED_TRACK_BBOX',
  StartTracking = 'tracker/START_TRACKING',
  EndTracking = 'tracker/END_TRACKING',
  PauseTracking = 'tracker/PAUSE_TRACKING',
  ResumeTracking = 'tracker/RESUME_TRACKING',
  AddPoint = 'tracker/ADD_POINT',
  //map
  SetCenter = 'map/SET_CENTER',
  SetOpacity = 'map/SET_OPACITY',
  SetZoom = 'map/SET_ZOOM',
  SetPrimary = 'map/SET_PRIMARY',
  SetSecondary = 'map/SET_SECONDARY',
  GetMapList = 'map/GET_MAP_LIST',
  GetMapListSuccess = 'map/GET_MAP_LIST_SUCCESS',
  GetMapListFailure = 'map/GET_MAP_LIST_FAILED',
  LoadMapList = 'map/LOAD_MAP_LIST',
  LoadMapListSuccess = 'map/LOAD_MAP_LIST_SUCCESS',
  LoadMapListFailure = 'map/LOAD_MAP_LIST_FAILED',
  LoadMapProgress = 'map/LOAD_MAP_PROGRESS',
  DownloadMap = 'map/DOWNLOAD_MAP',
  DownloadMapSuccess = 'map/DOWNLOAD_MAP_SUCCESS',
  DownloadMapFailure = 'map/DOWNLOAD_MAP_FAILED',
  CancelDownloadMap = 'map/CANCEL_DOWNLOAD_MAP',
  DeleteMap = 'map/DELETE_MAP',
  DeleteMapSuccess = 'map/DELETE_MAP_SUCCESS',
  DeleteMapFailure = 'map/DELETE_MAP_FAILED',
  ImportMap = 'map/IMPORT_MAP',
  ImportMapSuccess = 'map/IMPORT_MAP_SUCCESS',
  ImportMapFailure = 'map/IMPORT_MAP_FAILED',
  ChangeMapStorage = 'map/CHANGE_MAP_STORAGE',
  ChangeMapStorageSuccess = 'map/CHANGE_MAP_STORAGE_SUCCESS',
  ChangeMapStorageFailure = 'map/CHANGE_MAP_STORAGE_FAILED',
  RelocateMapProgress = 'map/RELOCATE_MAP_PROGRESS',
  CancelChangeMapStorage = 'map/CANCEL_CHANGE_MAP_STORAGE',
  SetWikimapia = 'map/SET_WIKIMAPIA',
  //ui
  UIAddModal = 'ui/ADD_MODAL',
  UIRemoveModal = 'ui/REMOVE_MODAL',
}
